// Function to generate grey events for dates from the start of the year until today (excluding redEvents)
useEffect(() => {
  const currentYearStart = moment().startOf('year');
  const currentDate = moment().startOf('day');
  const greyEventDates = [];

  while (currentDate.isBefore(currentYearStart)) {
    const dateString = currentDate.format('YYYY-MM-DD');
    if (!redEvents.some((event) => moment(dateString).isBetween(event.start, event.end, 'day', '[]'))) {
      greyEventDates.push(dateString);
    }
    currentDate.add(1, 'day');
  }

  // Create grey events for the filtered dates
  const transformedGreyEvents = greyEventDates.map((dateString) => ({
    id: `grey-${dateString}`,
    title: 'Past Day',
    start: moment(dateString).toDate(),
    end: moment(dateString).toDate(),
    color: 'grey',
    allDay: true,
  }));

  setGreyEvents(transformedGreyEvents);
}, [redEvents]);

// Function to generate green events for dates from today until the end of the year (excluding redEvents)
useEffect(() => {
  if (redEvents.length > 0) {
    const greenEventDates = [];
    redEvents.forEach((redEvent) => {
      const startDate = moment(redEvent.start);
      const endDate = moment(redEvent.end);

      for (let date = startDate; date.isSameOrBefore(endDate); date.add(1, 'day')) {
        greenEventDates.push(date.format('YYYY-MM-DD'));
      }
    });

    // Create green events for dates not covered by red events, starting from today
    const transformedGreenEvents = [];
    const currentDate = moment().startOf('day');
    const endOfYear = moment().endOf('year');
    while (currentDate.isBefore(endOfYear)) {
      const dateString = currentDate.format('YYYY-MM-DD');
      if (!greenEventDates.includes(dateString)) {
        transformedGreenEvents.push({
          id: `green-${dateString}`,
          title: 'Available',
          start: currentDate.toDate(),
          end: currentDate.toDate(),
          color: 'green',
          allDay: true,
        });
      }
      currentDate.add(1, 'day');
    }
    setGreenEvents(transformedGreenEvents);
  }
}, [redEvents]);

// ... (rest of the code remains the same)
